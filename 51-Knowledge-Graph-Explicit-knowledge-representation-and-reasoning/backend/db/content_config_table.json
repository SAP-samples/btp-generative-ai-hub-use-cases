{
    "classes_query": "prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> prefix : <http://www.semanticweb.org/ontologies/2025/smart-technical-advisory-ontology/> prefix owl: <http://www.w3.org/2002/07/owl#> prefix foaf: <http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?class_iri ?description FROM <http://www.semanticweb.org/ontologies/2025/smart-technical-advisory-ontology> WHERE { ?class_iri rdf:type owl:Class . FILTER (isIRI(?class_iri)) . OPTIONAL { ?class_iri rdfs:comment ?description } } ORDER BY ?class_iri",
    "graph": "http://www.semanticweb.org/ontologies/2025/smart-technical-advisory-rdf-v4",
    "graph_inferred": "http://www.semanticweb.org/ontologies/2025/smart-technical-advisory-inferred-triples-v4",
    "instructions": "When you generate the final query, remove the ``` quotes and only return the query. Ensure that the WHERE clause is properly closed with a } character.",
    "ontology_query": "CONSTRUCT {?s ?p ?o} FROM <http://www.semanticweb.org/ontologies/2025/smart-technical-advisory-ontology> WHERE {?s ?p ?o}",
    "prefixes": "Use the following prefixes when generating the SPARQL query:\nprefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> prefix : <http://www.semanticweb.org/ontologies/2025/smart-technical-advisory-ontology/> prefix owl: <http://www.w3.org/2002/07/owl#> prefix foaf: <http://xmlns.com/foaf/0.1/> prefix xsd: <http://www.w3.org/2001/XMLSchema#>",
    "property_query": "prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> prefix : <http://www.semanticweb.org/ontologies/2025/smart-technical-advisory-ontology/> prefix owl: <http://www.w3.org/2002/07/owl#> prefix foaf: <http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?property_iri ?domain ?range ?description FROM <http://www.semanticweb.org/ontologies/2025/smart-technical-advisory-ontology> WHERE { {?property_iri rdf:type owl:ObjectProperty .} UNION {?property_iri rdf:type owl:DatatypeProperty .} OPTIONAL {?property_iri rdfs:comment ?description .} OPTIONAL { ?property_iri rdfs:domain ?domain ; rdfs:range ?range .} } ORDER BY ?property_iri",
    "query_example": "prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> prefix : <http://www.semanticweb.org/ontologies/2025/smart-technical-advisory-ontology/> prefix owl: <http://www.w3.org/2002/07/owl#> prefix foaf: <http://xmlns.com/foaf/0.1/> SELECT ?partnerRef ?psrRef FROM <http://www.semanticweb.org/ontologies/2025/smart-technical-advisory-rdf-v4> FROM <http://www.semanticweb.org/ontologies/2025/smart-technical-advisory-inferred-triples-v4> WHERE { ?partnerRef a :SAPPartner; :requested ?psrRef . }",
    "query_template": "\n        WITH TABLE_KG AS (\n            SELECT *\n            FROM SPARQL_TABLE('\n            \n                {generated_sparql_query}\n                \n            ')   \n        )\n        SELECT TOP 5 \n            \"TABLE_KG\".*, TRIM(\"topic\") \"topic\", \n            COSINE_SIMILARITY(\"topic_embedding\", VECTOR_EMBEDDING('{topic}', 'QUERY', 'SAP_NEB.20240715')) AS \"COSINE_SIMILARITY\"\n        FROM DBUSER.ADVISORIES4\n        INNER JOIN TABLE_KG\n        ON TRIM(TABLE_KG.\"pbcOrderNumber\") = TRIM(ADVISORIES4.\"pbc_number\")\n        ORDER BY \"COSINE_SIMILARITY\" DESC;\n        ",
    "query_template_no_topic": "\n        WITH TABLE_KG AS (\n            SELECT *\n            FROM SPARQL_TABLE('\n            \n                {generated_sparql_query}\n                \n            ')   \n        )\n        SELECT \n            \"TABLE_KG\".*\n        FROM TABLE_KG\n        ",
    "template": "\nUse the provided information about the classes and properties from the ontology \nto generate a SPARQL query corresponding to the request here: {nl_query} .\n\nInformation about the classes defined in the ontology can be found here in csv format: {classes} .\nInformation about the properties defined in the ontology can be found here in csv format: {properties} . \nCheck always the domain and range of the properties to understand how to build the SPARQL query.\nThe whole ontology is described in turtle format here: {ontology} .\n\nWhen you build the SPARQL query use the following prefixes: {prefixes} and refer to this example: {query_example}.\nEnsure that the WHERE clause is properly closed!\nThe knowledge graphs to query are: {graph} and {graph_inferred} . Always include them in two FROM statements as in the provided example.\nIf the request asks for information about PBC order numbers, always name the variable \"pbcOrderNumber\" .\nAlways access the PBC order numbers with corresponding property of the service class.\n\nConsider also the following final instructions: {instructions} .\n",
    "template_similarity": "Consider this question: {question}. Recognize if the user is asking about a BTP Technical Advisory service or TA. If the user is talking about a BTP Technical Advisory service or TA, identify the technical topic covered by the TA. If you are able to indentify the technical topic, rephrase the question excluding the part concerning the topic. If not already present, add the following instruction to the rephrased question: \"Find all the PBC order numbers corresponding to the service.\" . If you are not able to indentify the technical topic, return \"None\" in the dictionary. Return the response in a python dictionary format where the two key are: \"topic\" and \"query\"."
}